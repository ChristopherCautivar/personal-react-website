import React, { useState, useRef, useEffect } from 'react';
import HabitCalendar from './HabitCalendar';
import { v4 as uuidv4 } from 'uuid';
import './HabitTracker.css'

export default function HabitTracker() {
  const habitMonth = useRef({})
  const currHabit = useRef({})
  const habitName = useRef({})
  // useState is responsible for triggering rerenders, otherwise habitMonth's useRef would be enough
  // to access and set the variable
  const [calendar, setCalendar] = useState({})
  const [habits, setHabits] = useState([])
  // tracks the composite calendar key generated by the current habitMonth value
  // and the current currHabit value
  const [calKey, setCalKey] = useState("")
  const today = new Date()

  const LOCAL_STORAGE_KEY_CALENDARS='habitTracker.calendars'
  const LOCAL_STORAGE_KEY_HABITS='habitTracker.habits'

  // one useEffect to load all local storage on componentDidMount equivalent
  useEffect(() => {
    const storedCalendars = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_CALENDARS))
    if (storedCalendars) setCalendar(storedCalendars)
    const storedHabits = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_HABITS))
    if (storedHabits) setHabits(storedHabits)
    // habitMonth.current.value = `${today.getFullYear()}-${String(today.getMonth()+1).padStart(2,"0")}`
    // console.log(currHabit.current.value)
    // if (!currHabit.current.value || !habitMonth.current.value) return
    // console.log("happens")
    // setCalKey(`${habitMonth.current.value}-${currHabit.current.value}`)
  }, [])

  // save the calendar on change
  useEffect(() => {
    localStorage.setItem(LOCAL_STORAGE_KEY_CALENDARS, JSON.stringify(calendar))
  }, [calendar])

  // save the habit list on change
  useEffect(() => {
    localStorage.setItem(LOCAL_STORAGE_KEY_HABITS, JSON.stringify(habits))
  }, [habits])

  function trackDay(key, id){
    const newCalendar = {...calendar}
    // take advantage of the find id. possible to change the days array into a days
    // object to save time.
    const day = newCalendar[key].find(day => day.id === id)
    day.tracked = !day.tracked
    setCalendar(newCalendar)
  }

  // calendar object: { id:uuidv4(), "month-year-habitName":[{id: uuidv4(), day: 1, tracked: false}, {id: uuidv4(), complete: true}, ...]}
  function handleCalendar(e){
    // if necessary values not present, return immediately
    if (!currHabit.current.value || !habitMonth.current.value) return
    const key = `${habitMonth.current.value}-${currHabit.current.value}`
    // if key not in calendars, make calendar in key, insert it into
    // calendars object
    if(!calendar[key]){
      const newCalendar = {...calendar};
      newCalendar[key] = [];
      setCalendar(newCalendar);
    }
    setCalKey(key);
  }

  function handleAddHabit(e){
    const name = habitName.current.value
    if (name === '') return
    setHabits(prevHabits => [...prevHabits, {id: uuidv4(), name: name}])
    habitName.current.value = null
  }

  return (
      <div className='Component'>
        <input ref={habitMonth} type="month" className='large-input' onChange={
          ()=>handleCalendar()} value={
            `${today.getFullYear()}-${String(today.getMonth()+1).padStart(2,"0")}`}/>
        {" "}
        <select ref={currHabit} className='large-input' onChange={()=>handleCalendar()}>
          {habits.map(habit=><option key={habit.id}>{habit.name}</option>)}
        </select>
        {" "}
        <div className='main-content'>
          {/* note that calendar must be tested first in order for the page to render correctly */}
          {currHabit.current.value && habitMonth.current.value && calKey ?
           <HabitCalendar monthSelected={calKey} habitDays={calendar[calKey]} trackDay={trackDay}/> :
            <button onClick={handleCalendar}>Load Calendar!</button>}
        </div>
        <input ref={habitName} type="text"/>
        {" "}
        <button onClick={handleAddHabit}>Add Habit</button>
      </div>
  );
}
